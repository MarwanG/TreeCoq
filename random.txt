FILE FOR RANDOM SHIT AND STUFF NO CLUE WHERE TO PUT AT THE MOMENT THEY ARE WRITTEN
IN THIS FILE.
COPYWRITES APPLY HERE AS WELL.


Fixpoint delete_bis (a:nat)(T: tree nat): tree nat :=
match T with
|trinode e1 e2 fg fm fd => (if beq_nat a e1 then
                               match fg with
                               |leaf => binode e2 fg fd
                               | _ => (let r := find_closet fg in
                                      trinode  r e2 (delete_bis r fg) fm fd)
                               end
                            else if beq_nat a e2 then
                               match fm with
                               |leaf => binode e1 fd fm
                               | _ => (let r := find_closet fm in
                                      trinode e1 e2 fg (delete_bis r fm) fd)
                               end       
                           else if ble_nat a e1 then
                               match fg with
                               |leaf => trinode e1 e2 fg fm fd
                               | _   => trinode e1 e2 (delete_bis a fg) fm fd
                               end
                           else if ble_nat a e2 then
                               match fm with
                               |leaf => trinode e1 e2 fg fm fd
                               | _ => trinode e1 e2 fg (delete_bis a fm) fd
                               end               
                           else
                             match fd with
                               |leaf => trinode e1 e2 fg fm fd
                               |_ => trinode e1 e2 fg fm (delete_bis a fm)
                               end
                           )
|quadnode e1 e2 e3 f1 f2 f3 f4 =>( if beq_nat a e1 then
                                   match f1 with
                                     |leaf => trinode e2 e3 f2 f3 f4
                                     | _ => (let r := find_closet f1 in
                                             quadnode r e2 e3 (delete_bis r f1) f2 f3 f4)
                                   end                         
                                   else if beq_nat a e2 then
                                   match f2 with
                                     |leaf => trinode e1 e3 f1 f2 f3
                                     |_ => (let r := find_closet f2 in
                                            quadnode e1 r e3 f1 (delete_bis r f2) f3 f4)                                              end
                                   else if beq_nat a e3 then
                                   match f3 with
                                     |leaf => trinode e1 e2 f1 f2 f3
                                     | _ => (let r := find_closet f3 in
                                             quadnode e1 e2 r f1 f2 (delete_bis r f3) f4)                                             end
                                   else if ble_nat a e1 then
                                   match f1 with
                                     |leaf => quadnode e1 e2 e3 f1 f2 f3 f4
                                     | _ => quadnode e1 e2 e3 (delete_bis a f1) f2 f3 f4                                             end
                                   else if ble_nat a e2 then
                                   match f2 with
                                     |leaf => quadnode e1 e2 e3 f1 f2 f3 f4
                                     | _ => quadnode e1 e2 e3 f1 (delete_bis a f2) f3 f4                                             end
                                   else if ble_nat a e3 then
                                   match f3 with
                                     |leaf => quadnode e1 e2 e3 f1 f2 f3 f4
                                     | _ => quadnode e1 e2 e3 f1 f2 (delete_bis a f3) f4                                             end
                                   else quadnode e1 e2 e3 f1 f2 f3 (delete_bis a f4)
                                 )
| binode e fg fd => (if beq_nat a e then
                       match fg with
                         |leaf => (*MERDE SEUL TRUC QUI MANQUE*) binode e fg fd
                         |_ => (let r := find_closet fg in
                                binode r (delete_bis r fg) fd)
                       end
                     else if ble_nat a e then
                         match fg with
                           |leaf => binode e fg fd
                           | _ => binode e (delete_bis a fg) fd
                         end
                     else
                       match fd with
                         |leaf => binode e fg fd
                         | _ => binode e fg (delete_bis a fd)
                       end
                    )
|leaf => leaf
end.

